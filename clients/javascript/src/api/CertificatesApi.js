/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateItemPage from '../model/CertificateItemPage';
import CreateCertificateCommand from '../model/CreateCertificateCommand';
import UpdateCertificateCommand from '../model/UpdateCertificateCommand';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 1.0
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCertificatesGet operation.
     * @callback module:api/CertificatesApi~apiCertificatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateItemPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchText  (default to '')
     * @param {Number} opts.pageIndex  (default to 0)
     * @param {Number} opts.pageSize  (default to 50)
     * @param {String} opts.sortBy  (default to 'Name')
     * @param {Boolean} opts.isSortedAscending  (default to true)
     * @param {module:api/CertificatesApi~apiCertificatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateItemPage}
     */
    apiCertificatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'sortBy': opts['sortBy'],
        'IsSortedAscending': opts['isSortedAscending']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CertificateItemPage;
      return this.apiClient.callApi(
        '/api/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCertificatesIdDelete operation.
     * @callback module:api/CertificatesApi~apiCertificatesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CertificatesApi~apiCertificatesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCertificatesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCertificatesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCertificatesIdPut operation.
     * @callback module:api/CertificatesApi~apiCertificatesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateCertificateCommand} opts.updateCertificateCommand 
     * @param {module:api/CertificatesApi~apiCertificatesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCertificatesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateCertificateCommand'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCertificatesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/certificates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCertificatesPost operation.
     * @callback module:api/CertificatesApi~apiCertificatesPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCertificateCommand} opts.createCertificateCommand 
     * @param {module:api/CertificatesApi~apiCertificatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiCertificatesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createCertificateCommand'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
