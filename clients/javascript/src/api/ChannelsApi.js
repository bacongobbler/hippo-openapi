/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelItem from '../model/ChannelItem';
import ChannelItemPage from '../model/ChannelItemPage';
import CreateChannelCommand from '../model/CreateChannelCommand';
import GetChannelLogsVm from '../model/GetChannelLogsVm';
import PatchChannelCommand from '../model/PatchChannelCommand';
import UpdateChannelCommand from '../model/UpdateChannelCommand';
import UpdateDesiredStatusCommand from '../model/UpdateDesiredStatusCommand';

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiChannelsChannelIdDesiredStatusPut operation.
     * @callback module:api/ChannelsApi~apiChannelsChannelIdDesiredStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDesiredStatusCommand} opts.updateDesiredStatusCommand 
     * @param {module:api/ChannelsApi~apiChannelsChannelIdDesiredStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiChannelsChannelIdDesiredStatusPut(channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDesiredStatusCommand'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling apiChannelsChannelIdDesiredStatusPut");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/channels/{channelId}/desired-status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsGet operation.
     * @callback module:api/ChannelsApi~apiChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelItemPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchText  (default to '')
     * @param {Number} opts.pageIndex  (default to 0)
     * @param {Number} opts.pageSize  (default to 50)
     * @param {String} opts.sortBy  (default to 'Name')
     * @param {Boolean} opts.isSortedAscending  (default to true)
     * @param {module:api/ChannelsApi~apiChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelItemPage}
     */
    apiChannelsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'sortBy': opts['sortBy'],
        'IsSortedAscending': opts['isSortedAscending']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChannelItemPage;
      return this.apiClient.callApi(
        '/api/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsIdDelete operation.
     * @callback module:api/ChannelsApi~apiChannelsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ChannelsApi~apiChannelsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiChannelsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiChannelsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/channels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsIdGet operation.
     * @callback module:api/ChannelsApi~apiChannelsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ChannelsApi~apiChannelsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelItem}
     */
    apiChannelsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiChannelsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ChannelItem;
      return this.apiClient.callApi(
        '/api/channels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsIdLogsGet operation.
     * @callback module:api/ChannelsApi~apiChannelsIdLogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelLogsVm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ChannelsApi~apiChannelsIdLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelLogsVm}
     */
    apiChannelsIdLogsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiChannelsIdLogsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GetChannelLogsVm;
      return this.apiClient.callApi(
        '/api/channels/{id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsIdPatch operation.
     * @callback module:api/ChannelsApi~apiChannelsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchChannelCommand} opts.patchChannelCommand 
     * @param {module:api/ChannelsApi~apiChannelsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiChannelsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchChannelCommand'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiChannelsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/channels/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsIdPut operation.
     * @callback module:api/ChannelsApi~apiChannelsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateChannelCommand} opts.updateChannelCommand 
     * @param {module:api/ChannelsApi~apiChannelsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiChannelsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateChannelCommand'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiChannelsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/channels/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiChannelsPost operation.
     * @callback module:api/ChannelsApi~apiChannelsPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateChannelCommand} opts.createChannelCommand 
     * @param {module:api/ChannelsApi~apiChannelsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiChannelsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createChannelCommand'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
