/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// AppDto struct for AppDto
type AppDto struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	StorageId NullableString `json:"storageId,omitempty"`
	Channels []ChannelDto `json:"channels,omitempty"`
	Revisions []RevisionDto `json:"revisions,omitempty"`
}

// NewAppDto instantiates a new AppDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDto() *AppDto {
	this := AppDto{}
	return &this
}

// NewAppDtoWithDefaults instantiates a new AppDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDtoWithDefaults() *AppDto {
	this := AppDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AppDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AppDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AppDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AppDto) UnsetName() {
	o.Name.Unset()
}

// GetStorageId returns the StorageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDto) GetStorageId() string {
	if o == nil || o.StorageId.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageId.Get()
}

// GetStorageIdOk returns a tuple with the StorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDto) GetStorageIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageId.Get(), o.StorageId.IsSet()
}

// HasStorageId returns a boolean if a field has been set.
func (o *AppDto) HasStorageId() bool {
	if o != nil && o.StorageId.IsSet() {
		return true
	}

	return false
}

// SetStorageId gets a reference to the given NullableString and assigns it to the StorageId field.
func (o *AppDto) SetStorageId(v string) {
	o.StorageId.Set(&v)
}
// SetStorageIdNil sets the value for StorageId to be an explicit nil
func (o *AppDto) SetStorageIdNil() {
	o.StorageId.Set(nil)
}

// UnsetStorageId ensures that no value is present for StorageId, not even an explicit nil
func (o *AppDto) UnsetStorageId() {
	o.StorageId.Unset()
}

// GetChannels returns the Channels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDto) GetChannels() []ChannelDto {
	if o == nil  {
		var ret []ChannelDto
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDto) GetChannelsOk() (*[]ChannelDto, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return &o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *AppDto) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []ChannelDto and assigns it to the Channels field.
func (o *AppDto) SetChannels(v []ChannelDto) {
	o.Channels = v
}

// GetRevisions returns the Revisions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppDto) GetRevisions() []RevisionDto {
	if o == nil  {
		var ret []RevisionDto
		return ret
	}
	return o.Revisions
}

// GetRevisionsOk returns a tuple with the Revisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppDto) GetRevisionsOk() (*[]RevisionDto, bool) {
	if o == nil || o.Revisions == nil {
		return nil, false
	}
	return &o.Revisions, true
}

// HasRevisions returns a boolean if a field has been set.
func (o *AppDto) HasRevisions() bool {
	if o != nil && o.Revisions != nil {
		return true
	}

	return false
}

// SetRevisions gets a reference to the given []RevisionDto and assigns it to the Revisions field.
func (o *AppDto) SetRevisions(v []RevisionDto) {
	o.Revisions = v
}

func (o AppDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.StorageId.IsSet() {
		toSerialize["storageId"] = o.StorageId.Get()
	}
	if o.Channels != nil {
		toSerialize["channels"] = o.Channels
	}
	if o.Revisions != nil {
		toSerialize["revisions"] = o.Revisions
	}
	return json.Marshal(toSerialize)
}

type NullableAppDto struct {
	value *AppDto
	isSet bool
}

func (v NullableAppDto) Get() *AppDto {
	return v.value
}

func (v *NullableAppDto) Set(val *AppDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDto(val *AppDto) *NullableAppDto {
	return &NullableAppDto{value: val, isSet: true}
}

func (v NullableAppDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


