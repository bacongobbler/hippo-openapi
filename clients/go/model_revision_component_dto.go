/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// RevisionComponentDto struct for RevisionComponentDto
type RevisionComponentDto struct {
	Id string `json:"id"`
	Source string `json:"source"`
	Name string `json:"name"`
	Route string `json:"route"`
}

// NewRevisionComponentDto instantiates a new RevisionComponentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionComponentDto(id string, source string, name string, route string) *RevisionComponentDto {
	this := RevisionComponentDto{}
	this.Id = id
	this.Source = source
	this.Name = name
	this.Route = route
	return &this
}

// NewRevisionComponentDtoWithDefaults instantiates a new RevisionComponentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionComponentDtoWithDefaults() *RevisionComponentDto {
	this := RevisionComponentDto{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionComponentDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionComponentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionComponentDto) SetId(v string) {
	o.Id = v
}

// GetSource returns the Source field value
func (o *RevisionComponentDto) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RevisionComponentDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RevisionComponentDto) SetSource(v string) {
	o.Source = v
}

// GetName returns the Name field value
func (o *RevisionComponentDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RevisionComponentDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RevisionComponentDto) SetName(v string) {
	o.Name = v
}

// GetRoute returns the Route field value
func (o *RevisionComponentDto) GetRoute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Route
}

// GetRouteOk returns a tuple with the Route field value
// and a boolean to check if the value has been set.
func (o *RevisionComponentDto) GetRouteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Route, true
}

// SetRoute sets field value
func (o *RevisionComponentDto) SetRoute(v string) {
	o.Route = v
}

func (o RevisionComponentDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["route"] = o.Route
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionComponentDto struct {
	value *RevisionComponentDto
	isSet bool
}

func (v NullableRevisionComponentDto) Get() *RevisionComponentDto {
	return v.value
}

func (v *NullableRevisionComponentDto) Set(val *RevisionComponentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionComponentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionComponentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionComponentDto(val *RevisionComponentDto) *NullableRevisionComponentDto {
	return &NullableRevisionComponentDto{value: val, isSet: true}
}

func (v NullableRevisionComponentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionComponentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


