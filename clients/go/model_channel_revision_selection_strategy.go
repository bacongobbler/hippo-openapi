/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
	"fmt"
)

// ChannelRevisionSelectionStrategy the model 'ChannelRevisionSelectionStrategy'
type ChannelRevisionSelectionStrategy string

// List of ChannelRevisionSelectionStrategy
const (
	USE_RANGE_RULE ChannelRevisionSelectionStrategy = "UseRangeRule"
	USE_SPECIFIED_REVISION ChannelRevisionSelectionStrategy = "UseSpecifiedRevision"
)

// All allowed values of ChannelRevisionSelectionStrategy enum
var AllowedChannelRevisionSelectionStrategyEnumValues = []ChannelRevisionSelectionStrategy{
	"UseRangeRule",
	"UseSpecifiedRevision",
}

func (v *ChannelRevisionSelectionStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelRevisionSelectionStrategy(value)
	for _, existing := range AllowedChannelRevisionSelectionStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelRevisionSelectionStrategy", value)
}

// NewChannelRevisionSelectionStrategyFromValue returns a pointer to a valid ChannelRevisionSelectionStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelRevisionSelectionStrategyFromValue(v string) (*ChannelRevisionSelectionStrategy, error) {
	ev := ChannelRevisionSelectionStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelRevisionSelectionStrategy: valid values are %v", v, AllowedChannelRevisionSelectionStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelRevisionSelectionStrategy) IsValid() bool {
	for _, existing := range AllowedChannelRevisionSelectionStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelRevisionSelectionStrategy value
func (v ChannelRevisionSelectionStrategy) Ptr() *ChannelRevisionSelectionStrategy {
	return &v
}

type NullableChannelRevisionSelectionStrategy struct {
	value *ChannelRevisionSelectionStrategy
	isSet bool
}

func (v NullableChannelRevisionSelectionStrategy) Get() *ChannelRevisionSelectionStrategy {
	return v.value
}

func (v *NullableChannelRevisionSelectionStrategy) Set(val *ChannelRevisionSelectionStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelRevisionSelectionStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelRevisionSelectionStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelRevisionSelectionStrategy(val *ChannelRevisionSelectionStrategy) *NullableChannelRevisionSelectionStrategy {
	return &NullableChannelRevisionSelectionStrategy{value: val, isSet: true}
}

func (v NullableChannelRevisionSelectionStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelRevisionSelectionStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

