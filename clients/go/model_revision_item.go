/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// RevisionItem struct for RevisionItem
type RevisionItem struct {
	Id string `json:"id"`
	AppId string `json:"appId"`
	RevisionNumber string `json:"revisionNumber"`
	Components []RevisionComponentDto `json:"components"`
	Type NullableString `json:"type,omitempty"`
}

// NewRevisionItem instantiates a new RevisionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionItem(id string, appId string, revisionNumber string, components []RevisionComponentDto) *RevisionItem {
	this := RevisionItem{}
	this.Id = id
	this.AppId = appId
	this.RevisionNumber = revisionNumber
	this.Components = components
	return &this
}

// NewRevisionItemWithDefaults instantiates a new RevisionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionItemWithDefaults() *RevisionItem {
	this := RevisionItem{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionItem) SetId(v string) {
	o.Id = v
}

// GetAppId returns the AppId field value
func (o *RevisionItem) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *RevisionItem) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *RevisionItem) SetAppId(v string) {
	o.AppId = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *RevisionItem) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *RevisionItem) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *RevisionItem) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetComponents returns the Components field value
func (o *RevisionItem) GetComponents() []RevisionComponentDto {
	if o == nil {
		var ret []RevisionComponentDto
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *RevisionItem) GetComponentsOk() ([]RevisionComponentDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *RevisionItem) SetComponents(v []RevisionComponentDto) {
	o.Components = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RevisionItem) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RevisionItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RevisionItem) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RevisionItem) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RevisionItem) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RevisionItem) UnsetType() {
	o.Type.Unset()
}

func (o RevisionItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["revisionNumber"] = o.RevisionNumber
	}
	if true {
		toSerialize["components"] = o.Components
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionItem struct {
	value *RevisionItem
	isSet bool
}

func (v NullableRevisionItem) Get() *RevisionItem {
	return v.value
}

func (v *NullableRevisionItem) Set(val *RevisionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionItem(val *RevisionItem) *NullableRevisionItem {
	return &NullableRevisionItem{value: val, isSet: true}
}

func (v NullableRevisionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


