/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// StorageList struct for StorageList
type StorageList struct {
	Storages []string `json:"storages"`
}

// NewStorageList instantiates a new StorageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageList(storages []string) *StorageList {
	this := StorageList{}
	this.Storages = storages
	return &this
}

// NewStorageListWithDefaults instantiates a new StorageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageListWithDefaults() *StorageList {
	this := StorageList{}
	return &this
}

// GetStorages returns the Storages field value
func (o *StorageList) GetStorages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Storages
}

// GetStoragesOk returns a tuple with the Storages field value
// and a boolean to check if the value has been set.
func (o *StorageList) GetStoragesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storages, true
}

// SetStorages sets field value
func (o *StorageList) SetStorages(v []string) {
	o.Storages = v
}

func (o StorageList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["storages"] = o.Storages
	}
	return json.Marshal(toSerialize)
}

type NullableStorageList struct {
	value *StorageList
	isSet bool
}

func (v NullableStorageList) Get() *StorageList {
	return v.value
}

func (v *NullableStorageList) Set(val *StorageList) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageList) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageList(val *StorageList) *NullableStorageList {
	return &NullableStorageList{value: val, isSet: true}
}

func (v NullableStorageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


