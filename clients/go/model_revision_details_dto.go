/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// RevisionDetailsDto struct for RevisionDetailsDto
type RevisionDetailsDto struct {
	Id string `json:"id"`
	RevisionNumber string `json:"revisionNumber"`
	Description string `json:"description"`
	Components []RevisionComponentDto `json:"components,omitempty"`
}

// NewRevisionDetailsDto instantiates a new RevisionDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionDetailsDto(id string, revisionNumber string, description string) *RevisionDetailsDto {
	this := RevisionDetailsDto{}
	this.Id = id
	this.RevisionNumber = revisionNumber
	this.Description = description
	return &this
}

// NewRevisionDetailsDtoWithDefaults instantiates a new RevisionDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionDetailsDtoWithDefaults() *RevisionDetailsDto {
	this := RevisionDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionDetailsDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionDetailsDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionDetailsDto) SetId(v string) {
	o.Id = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *RevisionDetailsDto) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *RevisionDetailsDto) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *RevisionDetailsDto) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetDescription returns the Description field value
func (o *RevisionDetailsDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RevisionDetailsDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RevisionDetailsDto) SetDescription(v string) {
	o.Description = v
}

// GetComponents returns the Components field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RevisionDetailsDto) GetComponents() []RevisionComponentDto {
	if o == nil {
		var ret []RevisionComponentDto
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RevisionDetailsDto) GetComponentsOk() ([]RevisionComponentDto, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *RevisionDetailsDto) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []RevisionComponentDto and assigns it to the Components field.
func (o *RevisionDetailsDto) SetComponents(v []RevisionComponentDto) {
	o.Components = v
}

func (o RevisionDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["revisionNumber"] = o.RevisionNumber
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionDetailsDto struct {
	value *RevisionDetailsDto
	isSet bool
}

func (v NullableRevisionDetailsDto) Get() *RevisionDetailsDto {
	return v.value
}

func (v *NullableRevisionDetailsDto) Set(val *RevisionDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionDetailsDto(val *RevisionDetailsDto) *NullableRevisionDetailsDto {
	return &NullableRevisionDetailsDto{value: val, isSet: true}
}

func (v NullableRevisionDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


