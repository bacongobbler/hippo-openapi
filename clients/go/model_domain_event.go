/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
	"time"
)

// DomainEvent struct for DomainEvent
type DomainEvent struct {
	IsPublished *bool `json:"isPublished,omitempty"`
	DateOccurred *time.Time `json:"dateOccurred,omitempty"`
}

// NewDomainEvent instantiates a new DomainEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainEvent() *DomainEvent {
	this := DomainEvent{}
	return &this
}

// NewDomainEventWithDefaults instantiates a new DomainEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainEventWithDefaults() *DomainEvent {
	this := DomainEvent{}
	return &this
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *DomainEvent) GetIsPublished() bool {
	if o == nil || o.IsPublished == nil {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEvent) GetIsPublishedOk() (*bool, bool) {
	if o == nil || o.IsPublished == nil {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *DomainEvent) HasIsPublished() bool {
	if o != nil && o.IsPublished != nil {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *DomainEvent) SetIsPublished(v bool) {
	o.IsPublished = &v
}

// GetDateOccurred returns the DateOccurred field value if set, zero value otherwise.
func (o *DomainEvent) GetDateOccurred() time.Time {
	if o == nil || o.DateOccurred == nil {
		var ret time.Time
		return ret
	}
	return *o.DateOccurred
}

// GetDateOccurredOk returns a tuple with the DateOccurred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEvent) GetDateOccurredOk() (*time.Time, bool) {
	if o == nil || o.DateOccurred == nil {
		return nil, false
	}
	return o.DateOccurred, true
}

// HasDateOccurred returns a boolean if a field has been set.
func (o *DomainEvent) HasDateOccurred() bool {
	if o != nil && o.DateOccurred != nil {
		return true
	}

	return false
}

// SetDateOccurred gets a reference to the given time.Time and assigns it to the DateOccurred field.
func (o *DomainEvent) SetDateOccurred(v time.Time) {
	o.DateOccurred = &v
}

func (o DomainEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsPublished != nil {
		toSerialize["isPublished"] = o.IsPublished
	}
	if o.DateOccurred != nil {
		toSerialize["dateOccurred"] = o.DateOccurred
	}
	return json.Marshal(toSerialize)
}

type NullableDomainEvent struct {
	value *DomainEvent
	isSet bool
}

func (v NullableDomainEvent) Get() *DomainEvent {
	return v.value
}

func (v *NullableDomainEvent) Set(val *DomainEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainEvent(val *DomainEvent) *NullableDomainEvent {
	return &NullableDomainEvent{value: val, isSet: true}
}

func (v NullableDomainEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


