/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// RevisionDto struct for RevisionDto
type RevisionDto struct {
	Id *string `json:"id,omitempty"`
	AppId *string `json:"appId,omitempty"`
	RevisionNumber NullableString `json:"revisionNumber,omitempty"`
}

// NewRevisionDto instantiates a new RevisionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionDto() *RevisionDto {
	this := RevisionDto{}
	return &this
}

// NewRevisionDtoWithDefaults instantiates a new RevisionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionDtoWithDefaults() *RevisionDto {
	this := RevisionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RevisionDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RevisionDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RevisionDto) SetId(v string) {
	o.Id = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *RevisionDto) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *RevisionDto) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *RevisionDto) SetAppId(v string) {
	o.AppId = &v
}

// GetRevisionNumber returns the RevisionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RevisionDto) GetRevisionNumber() string {
	if o == nil || o.RevisionNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.RevisionNumber.Get()
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RevisionDto) GetRevisionNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RevisionNumber.Get(), o.RevisionNumber.IsSet()
}

// HasRevisionNumber returns a boolean if a field has been set.
func (o *RevisionDto) HasRevisionNumber() bool {
	if o != nil && o.RevisionNumber.IsSet() {
		return true
	}

	return false
}

// SetRevisionNumber gets a reference to the given NullableString and assigns it to the RevisionNumber field.
func (o *RevisionDto) SetRevisionNumber(v string) {
	o.RevisionNumber.Set(&v)
}
// SetRevisionNumberNil sets the value for RevisionNumber to be an explicit nil
func (o *RevisionDto) SetRevisionNumberNil() {
	o.RevisionNumber.Set(nil)
}

// UnsetRevisionNumber ensures that no value is present for RevisionNumber, not even an explicit nil
func (o *RevisionDto) UnsetRevisionNumber() {
	o.RevisionNumber.Unset()
}

func (o RevisionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.RevisionNumber.IsSet() {
		toSerialize["revisionNumber"] = o.RevisionNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionDto struct {
	value *RevisionDto
	isSet bool
}

func (v NullableRevisionDto) Get() *RevisionDto {
	return v.value
}

func (v *NullableRevisionDto) Set(val *RevisionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionDto(val *RevisionDto) *NullableRevisionDto {
	return &NullableRevisionDto{value: val, isSet: true}
}

func (v NullableRevisionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


