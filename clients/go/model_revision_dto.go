/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// RevisionDto struct for RevisionDto
type RevisionDto struct {
	Id string `json:"id"`
	AppId string `json:"appId"`
	RevisionNumber string `json:"revisionNumber"`
	Components []RevisionComponentDto `json:"components"`
}

// NewRevisionDto instantiates a new RevisionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionDto(id string, appId string, revisionNumber string, components []RevisionComponentDto) *RevisionDto {
	this := RevisionDto{}
	this.Id = id
	this.AppId = appId
	this.RevisionNumber = revisionNumber
	this.Components = components
	return &this
}

// NewRevisionDtoWithDefaults instantiates a new RevisionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionDtoWithDefaults() *RevisionDto {
	this := RevisionDto{}
	return &this
}

// GetId returns the Id field value
func (o *RevisionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RevisionDto) SetId(v string) {
	o.Id = v
}

// GetAppId returns the AppId field value
func (o *RevisionDto) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *RevisionDto) SetAppId(v string) {
	o.AppId = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *RevisionDto) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *RevisionDto) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetComponents returns the Components field value
func (o *RevisionDto) GetComponents() []RevisionComponentDto {
	if o == nil {
		var ret []RevisionComponentDto
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *RevisionDto) GetComponentsOk() ([]RevisionComponentDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *RevisionDto) SetComponents(v []RevisionComponentDto) {
	o.Components = v
}

func (o RevisionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["revisionNumber"] = o.RevisionNumber
	}
	if true {
		toSerialize["components"] = o.Components
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionDto struct {
	value *RevisionDto
	isSet bool
}

func (v NullableRevisionDto) Get() *RevisionDto {
	return v.value
}

func (v *NullableRevisionDto) Set(val *RevisionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionDto(val *RevisionDto) *NullableRevisionDto {
	return &NullableRevisionDto{value: val, isSet: true}
}

func (v NullableRevisionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


