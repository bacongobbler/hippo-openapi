/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// CreateAccountCommand struct for CreateAccountCommand
type CreateAccountCommand struct {
	UserName string `json:"userName"`
	Password string `json:"password"`
	PasswordConfirm string `json:"passwordConfirm"`
}

// NewCreateAccountCommand instantiates a new CreateAccountCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccountCommand(userName string, password string, passwordConfirm string) *CreateAccountCommand {
	this := CreateAccountCommand{}
	this.UserName = userName
	this.Password = password
	this.PasswordConfirm = passwordConfirm
	return &this
}

// NewCreateAccountCommandWithDefaults instantiates a new CreateAccountCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccountCommandWithDefaults() *CreateAccountCommand {
	this := CreateAccountCommand{}
	return &this
}

// GetUserName returns the UserName field value
func (o *CreateAccountCommand) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *CreateAccountCommand) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *CreateAccountCommand) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value
func (o *CreateAccountCommand) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateAccountCommand) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateAccountCommand) SetPassword(v string) {
	o.Password = v
}

// GetPasswordConfirm returns the PasswordConfirm field value
func (o *CreateAccountCommand) GetPasswordConfirm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordConfirm
}

// GetPasswordConfirmOk returns a tuple with the PasswordConfirm field value
// and a boolean to check if the value has been set.
func (o *CreateAccountCommand) GetPasswordConfirmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PasswordConfirm, true
}

// SetPasswordConfirm sets field value
func (o *CreateAccountCommand) SetPasswordConfirm(v string) {
	o.PasswordConfirm = v
}

func (o CreateAccountCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userName"] = o.UserName
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["passwordConfirm"] = o.PasswordConfirm
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAccountCommand struct {
	value *CreateAccountCommand
	isSet bool
}

func (v NullableCreateAccountCommand) Get() *CreateAccountCommand {
	return v.value
}

func (v *NullableCreateAccountCommand) Set(val *CreateAccountCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccountCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccountCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccountCommand(val *CreateAccountCommand) *NullableCreateAccountCommand {
	return &NullableCreateAccountCommand{value: val, isSet: true}
}

func (v NullableCreateAccountCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccountCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


