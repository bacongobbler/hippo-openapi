/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// AppsVm struct for AppsVm
type AppsVm struct {
	Apps []AppDto `json:"apps,omitempty"`
}

// NewAppsVm instantiates a new AppsVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsVm() *AppsVm {
	this := AppsVm{}
	return &this
}

// NewAppsVmWithDefaults instantiates a new AppsVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsVmWithDefaults() *AppsVm {
	this := AppsVm{}
	return &this
}

// GetApps returns the Apps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsVm) GetApps() []AppDto {
	if o == nil  {
		var ret []AppDto
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsVm) GetAppsOk() (*[]AppDto, bool) {
	if o == nil || o.Apps == nil {
		return nil, false
	}
	return &o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *AppsVm) HasApps() bool {
	if o != nil && o.Apps != nil {
		return true
	}

	return false
}

// SetApps gets a reference to the given []AppDto and assigns it to the Apps field.
func (o *AppsVm) SetApps(v []AppDto) {
	o.Apps = v
}

func (o AppsVm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Apps != nil {
		toSerialize["apps"] = o.Apps
	}
	return json.Marshal(toSerialize)
}

type NullableAppsVm struct {
	value *AppsVm
	isSet bool
}

func (v NullableAppsVm) Get() *AppsVm {
	return v.value
}

func (v *NullableAppsVm) Set(val *AppsVm) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsVm) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsVm(val *AppsVm) *NullableAppsVm {
	return &NullableAppsVm{value: val, isSet: true}
}

func (v NullableAppsVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


