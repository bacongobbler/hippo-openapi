/*
Hippo.Web

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hippo-openapi

import (
	"encoding/json"
)

// CreateCertificateCommand struct for CreateCertificateCommand
type CreateCertificateCommand struct {
	Name string `json:"name"`
	PublicKey string `json:"publicKey"`
	PrivateKey string `json:"privateKey"`
}

// NewCreateCertificateCommand instantiates a new CreateCertificateCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCertificateCommand(name string, publicKey string, privateKey string) *CreateCertificateCommand {
	this := CreateCertificateCommand{}
	this.Name = name
	this.PublicKey = publicKey
	this.PrivateKey = privateKey
	return &this
}

// NewCreateCertificateCommandWithDefaults instantiates a new CreateCertificateCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCertificateCommandWithDefaults() *CreateCertificateCommand {
	this := CreateCertificateCommand{}
	return &this
}

// GetName returns the Name field value
func (o *CreateCertificateCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCertificateCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCertificateCommand) SetName(v string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value
func (o *CreateCertificateCommand) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *CreateCertificateCommand) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *CreateCertificateCommand) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *CreateCertificateCommand) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *CreateCertificateCommand) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *CreateCertificateCommand) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o CreateCertificateCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["publicKey"] = o.PublicKey
	}
	if true {
		toSerialize["privateKey"] = o.PrivateKey
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCertificateCommand struct {
	value *CreateCertificateCommand
	isSet bool
}

func (v NullableCreateCertificateCommand) Get() *CreateCertificateCommand {
	return v.value
}

func (v *NullableCreateCertificateCommand) Set(val *CreateCertificateCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCertificateCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCertificateCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCertificateCommand(val *CreateCertificateCommand) *NullableCreateCertificateCommand {
	return &NullableCreateCertificateCommand{value: val, isSet: true}
}

func (v NullableCreateCertificateCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCertificateCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


